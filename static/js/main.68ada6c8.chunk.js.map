{"version":3,"sources":["logo.svg","views/component/Settings.js","views/Login.js","App.js","serviceWorker.js","key.js","index.js"],"names":["module","exports","__webpack_require__","p","Settings","react_default","a","createElement","io","size","this","props","className","onClick","Component","Login","componentDidMount","_this","createLoginButton","window","Kakao","Auth","container","success","authObj","alert","JSON","stringify","fail","err","Settings_Settings","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isLogined","getStatus","statusObj","console","log","isLogin","status","setState","state","Login_Login","Boolean","location","hostname","match","store","APP_KEY","key","str","error","init","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gOCGnBC,mLAEb,OACAC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,KAAMC,KAAKC,MAAMF,KACjBG,UAAWF,KAAKC,MAAMC,UACtBC,QAASH,KAAKC,MAAME,iBANMC,aCCjBC,oNAEjBC,kBAAoB,kBAAMC,EAAKC,uBAE/BA,kBAAoB,WAChBC,OAAOC,MAAMC,KAAKH,kBAAkB,CAChCI,UAAW,mBACXC,QAAS,SAASC,GAChBC,MAAMC,KAAKC,UAAUH,KAEvBI,KAAM,SAASC,GACZJ,MAAMC,KAAKC,UAAUE,gFAM5B,OACAxB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SACXP,EAAAC,EAAAC,cAACuB,EAAD,CACIrB,KAAM,GACNG,UAAU,eACVC,QAAS,kBAAMY,MAAM,WAEzBpB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,eAAf,2CACAP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,4BAzBQE,cC8BpBiB,qBAzBb,SAAAA,EAAYpB,GAAO,IAAAM,EAAA,OAAAe,OAAAC,EAAA,EAAAD,CAAAtB,KAAAqB,IACjBd,EAAAe,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1B,KAAMC,KAKRK,kBAAoB,kBAAMC,EAAKoB,aANZpB,EAQnBoB,UAAY,WACVlB,OAAOC,MAAMC,KAAKiB,UAAU,SAAAC,GAC1BC,QAAQC,IAAIF,GACZ,IAAIG,EAA+B,cAArBH,EAAUI,OACxB1B,EAAK2B,SAAS,CAAEF,WAAW,WACzBF,QAAQC,IAAIxB,EAAK4B,YAXrB5B,EAAK4B,MAAQ,CACXH,SAAU,GAHKzB,wEAmBjB,OACEZ,EAAAC,EAAAC,cAACuC,EAAD,aAtBYhC,cCKEiC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DClBN,IAAMC,EAAQ,CACVC,QAAS,mCACTC,UAAa,OAAO3C,KAAK0C,SACzBC,QAASC,GAAOd,QAAQe,MAAM,2BCMlCpC,OAAOC,MAAMoC,KAAKL,EAAME,KAExBI,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,cFsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.68ada6c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport { IoIosSettings } from 'react-icons/io'\n\nexport default class Settings extends Component {\n    render() {\n        return (\n        <IoIosSettings \n            size={this.props.size}\n            className={this.props.className}\n            onClick={this.props.onClick}\n        />\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Settings from './component/Settings'\nimport './Login.css';\n\nexport default class Login extends Component {\n\n    componentDidMount = () => this.createLoginButton();\n\n    createLoginButton = () => {\n        window.Kakao.Auth.createLoginButton({\n            container: '.kakao-login-btn',\n            success: function(authObj) {\n              alert(JSON.stringify(authObj));\n            },\n            fail: function(err) {\n               alert(JSON.stringify(err));\n            }\n        });\n    }\n\n    render() {\n        return (\n        <div className=\"login\">\n            <Settings\n                size={30}\n                className=\"settings-btn\"\n                onClick={() => alert(\"test\")}\n            />\n            <div className=\"image-dummy\">&lt;이미지 테스트&gt;</div>\n            <div className=\"kakao-login-btn\"></div>\n        </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Login from './views/Login';\nimport Main from './views/Main';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLogin : false,    \n    }\n  }\n  componentDidMount = () => this.isLogined();\n\n  isLogined = () => {\n    window.Kakao.Auth.getStatus(statusObj => {\n      console.log(statusObj)\n      let isLogin = statusObj.status === \"connected\" ? true : false;\n      this.setState({ isLogin }, () => {\n        console.log(this.state)\n      });\n    })\n  }\n\n  render() {\n    return (\n      <Login />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const store = {\n    APP_KEY: 'a6728ccac409bd094bb858d9118e121f',\n    get key () { return this.APP_KEY },\n    set key (str) { console.error('cannot change app_key')}\n}\n\nexport { store };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { store } from './key';\n\n// 카카오 API 초기화\nwindow.Kakao.init(store.key);\n\nReactDOM.render(<App />, document.getElementById('container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
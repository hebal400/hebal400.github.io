{"version":3,"sources":["views/Profile.js","views/component/Settings.js","views/Login.js","views/Main.js","views/component/Loading.js","App.js","serviceWorker.js","key.js","index.js"],"names":["Component","Settings","react_default","a","createElement","io","size","this","props","className","onClick","Login","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","createLoginButton","window","Kakao","Auth","container","success","authObj","console","log","JSON","stringify","setState","redirect","fail","err","alert","state","Redirect","to","Settings_Settings","Main","logout","isLogin","Loading","undefined","isAuthed","App","isLogined","getStatus","statusObj","status","_this2","BrowserRouter","Switch","Route","exact","path","component","Loading_Loading","Login_Login","changeAuth","Main_Main","Boolean","location","hostname","match","store","APP_KEY","key","str","error","init","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3cf5c861.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Profile extends Component {\n  render() {\n    return (\n      <div>\n        tt\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { IoIosSettings } from 'react-icons/io'\n\nexport default class Settings extends Component {\n    render() {\n        return (\n        <IoIosSettings \n            size={this.props.size}\n            className={this.props.className}\n            onClick={this.props.onClick}\n        />\n        )\n    }\n}\n","/**\n * Login.js\n * Aerain, Jeju National University.\n */\n\nimport React, { Component } from 'react'\nimport Profile from './Profile';\nimport Settings from './component/Settings'\nimport { Redirect } from 'react-router-dom';\nimport './Login.css';\n\nexport default class Login extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false\n        }\n    }\n\n    componentDidMount = () => this.createLoginButton();\n\n    createLoginButton = () => {\n        window.Kakao.Auth.createLoginButton({\n            container: '.kakao-login-btn',\n            success: authObj => {\n                console.log(JSON.stringify(authObj));\n                this.setState({redirect: true});\n            },\n            fail: err => {\n               alert(JSON.stringify(err));\n            }\n        });\n    }\n\n    render() {\n        if(this.state.redirect) return <Redirect to=\"/send\" />\n        return (\n        <div className=\"login\">\n            <Settings\n                size={30}\n                className=\"settings-btn\"\n                onClick={() => alert(\"test\")}\n            />\n            <div className=\"image-dummy\">&lt;이미지 테스트에오&gt;</div>\n            <div className=\"kakao-login-btn\"></div>\n        </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nexport default class Main extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state= {\n      isLogin: true\n    }\n  }\n  logout = () => {\n    window.Kakao.Auth.logout();\n    this.setState({isLogin: false});\n  }\n  render() {\n    if(!this.state.isLogin) return <Redirect to=\"/login\" />\n    return (\n      <div>\n        로그인 했대요\n        <button onClick={this.logout}>로그아웃 합시다</button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom';\n\nexport default class Loading extends Component {\n\n    render() {\n        if(this.props.isAuthed === undefined) {\n            return (\n                <div>\n                    로딩중이에오...\n                </div>\n            )\n        } else {\n            if(!this.props.isAuthed) return <Redirect to=\"/login\" />\n            else return <Redirect to=\"/send\" />\n        }\n    }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport './App.css';\n\nimport Login from './views/Login';\nimport Main from './views/Main';\nimport Loading from './views/component/Loading';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    }\n  }\n  componentDidMount = () => this.isLogined();\n\n  isLogined = () => {\n    window.Kakao.Auth.getStatus(statusObj => {\n      let isLogin = statusObj.status === \"connected\" ? true : false;\n      this.setState({ isLogin });\n    })\n  }\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={() => <Loading isAuthed={this.state.isLogin} />} />\n          <Route path=\"/login\" component={() => <Login changeAuth={this.changeAuth}/>} />\n          <Route path=\"/send\" component={() => <Main changeAuth={this.changeAuth}/>} />  \n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const store = {\n    APP_KEY: 'a6728ccac409bd094bb858d9118e121f',\n    get key () { return this.APP_KEY },\n    set key (str) { console.error('cannot change app_key')}\n}\n\nexport { store };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { store } from './key';\n\n// 카카오 API 초기화\nwindow.Kakao.init(store.key);\n\nReactDOM.render(<App />, document.getElementById('container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
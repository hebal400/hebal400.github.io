{"version":3,"sources":["views/Login.js","views/component/Settings.js","views/Profile.js","views/Main.js","views/component/Loading.js","App.js","serviceWorker.js","key.js","index.js"],"names":["Login","props","_this","Object","_Users_aerain_Project_Public_hebal400_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_aerain_Project_Public_hebal400_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_aerain_Project_Public_hebal400_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","componentDidMount","createLoginButton","window","Kakao","Auth","container","success","authObj","console","log","JSON","stringify","setState","redirect","global","fail","err","alert","state","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","to","className","_component_Settings__WEBPACK_IMPORTED_MODULE_6__","size","onClick","Component","Settings","react_icons_io__WEBPACK_IMPORTED_MODULE_6__","Profile","classCallCheck","possibleConstructorReturn","getPrototypeOf","_isMounted","getProfile","asyncToGenerator","regenerator_default","mark","_callee","res","properties","wrap","_context","prev","next","API","request","url","sent","stop","componentWillUnmount","render","_this$state$propertie","nickname","thumbnail_image","react_default","src","profile_image","Main","logout","isLogin","Profile_Profile","sendTest","Redirect","Loading","undefined","isAuthed","App","isLogined","getStatus","statusObj","status","_this2","BrowserRouter","Switch","Route","exact","path","component","Loading_Loading","changeAuth","Main_Main","Boolean","location","hostname","match","store","APP_KEY","key","str","error","init","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f67faf9.chunk.js","sourcesContent":["/**\n * Login.js\n * Aerain, Jeju National University.\n */\n\nimport React, { Component } from 'react'\nimport Settings from './component/Settings'\nimport { Redirect } from 'react-router-dom';\nimport './Login.css';\n\nexport default class Login extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            redirect: false\n        }\n    }\n\n    componentDidMount = () => this.createLoginButton();\n\n    createLoginButton = () => {\n        window.Kakao.Auth.createLoginButton({\n            container: '.kakao-login-btn',\n            success: authObj => {\n                console.log(JSON.stringify(authObj));\n                this.setState({redirect: true});\n                global.authObj = authObj;\n            },\n            fail: err => {\n               alert(JSON.stringify(err));\n            }\n        });\n    }\n\n    render() {\n        if(this.state.redirect) return <Redirect to=\"/send\" />\n        return (\n        <div className=\"login\">\n            <Settings\n                size={30}\n                className=\"settings-btn\"\n                onClick={() => alert(\"test\")}\n            />\n            <div className=\"image-dummy\">&lt;이미지 테스트에오&gt;</div>\n            <div className=\"kakao-login-btn\"></div>\n        </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { IoIosSettings } from 'react-icons/io'\n\nexport default class Settings extends Component {\n    render() {\n        return (\n        <IoIosSettings \n            size={this.props.size}\n            className={this.props.className}\n            onClick={this.props.onClick}\n        />\n        )\n    }\n}\n","import React, { Component } from 'react';\n\nexport default class Profile extends Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      properties: {\n        nickname: \"none\",\n        profile_image: \"none\",\n      }\n    }\n  }\n  componentDidMount = () => {\n    this._isMounted = true;\n    this.getProfile()\n  }\n\n  getProfile = async () => {\n      let res = await window.Kakao.API.request({\n        url: '/v2/user/me'\n      })\n      let { properties } = res;\n      if(this._isMounted) await this.setState({properties})\n      console.log(this.state)\n  }\n  \n  componentWillUnmount = () => {\n    this._isMounted = false;\n  }\n  render = () => {\n    let {nickname, thumbnail_image} = this.state.properties;\n    return(\n      <header>\n        <img src={thumbnail_image !== 'none' ? thumbnail_image : ''} />\n        <span>{nickname !== 'none' ? nickname : ''}</span>\n      </header>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport Profile from './Profile';\n\nexport default class Main extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLogin: true\n    }\n  }\n\n  \n  logout = () => {\n    window.Kakao.Auth.logout();\n    this.setState({isLogin: false});\n  }\n\n  render() {\n    if(!this.state.isLogin) return <Redirect to=\"/login\" />\n    return (\n      <div>\n        <Profile />\n        로그인 했대요\n        <button onClick={this.logout}>로그아웃 합시다</button>\n        <button onClick={this.sendTest}>내게보내기 테스트</button>\n      </div>\n    )\n  }\n}\n\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom';\n\nexport default class Loading extends Component {\n\n    render() {\n        if(this.props.isAuthed === undefined) {\n            return (\n                <div>\n                    로딩중이에오...\n                </div>\n            )\n        } else {\n            if(!this.props.isAuthed) return <Redirect to=\"/login\" />\n            else return <Redirect to=\"/send\" />\n        }\n    }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nimport Login from './views/Login';\nimport Main from './views/Main';\nimport Loading from './views/component/Loading';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    }\n  }\n  componentDidMount = () => this.isLogined();\n\n  isLogined = () => {\n    window.Kakao.Auth.getStatus(statusObj => {\n      let isLogin = statusObj.status === \"connected\" ? true : false;\n      this.setState({ isLogin }, () => {\n        console.log(this.state);\n      });\n    })\n    \n  }\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={() => <Loading isAuthed={this.state.isLogin} />} />\n          <Route path=\"/login\" component={() => <Login changeAuth={this.changeAuth}/>} />\n          <Route path=\"/send\" component={() => <Main changeAuth={this.changeAuth}/>} />  \n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const store = {\n    APP_KEY: 'a6728ccac409bd094bb858d9118e121f',\n    get key () { return this.APP_KEY },\n    set key (str) { console.error('cannot change app_key')}\n}\n\nexport { store };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { store } from './key';\n\n// 카카오 API 초기화\nwindow.Kakao.init(store.key);\n\nReactDOM.render(<App />, document.getElementById('container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}